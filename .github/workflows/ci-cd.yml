name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push client image
        run: |
          docker build -t surya080903/ecotrack-client:latest -f ./client/Dockerfile ./client
          docker push surya080903/ecotrack-client:latest

      - name: Build and push server image
        run: |
          docker build -t surya080903/ecotrack-server:latest -f ./server/Dockerfile ./server
          docker push surya080903/ecotrack-server:latest

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl gnupg
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor | sudo tee /etc/apt/keyrings/kubernetes-apt-keyring.gpg > /dev/null
          echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          sudo apt-get install -y kubelet kubeadm kubectl
          sudo apt-mark hold kubelet kubeadm kubectl

      - name: Install cri-dockerd
        run: |
          sudo apt-get install -y golang-go
          wget https://github.com/Mirantis/cri-dockerd/releases/download/v0.2.0/cri-dockerd-v0.2.0-linux-amd64.tar.gz
          tar xvf cri-dockerd-v0.2.0-linux-amd64.tar.gz
          sudo mv ./cri-dockerd /usr/local/bin/
          wget https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.service
          wget https://raw.githubusercontent.com/Mirantis/cri-dockerd/master/packaging/systemd/cri-docker.socket
          sudo mv cri-docker.socket cri-docker.service /etc/systemd/system/
          sudo sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
          sudo systemctl daemon-reload || true  # Use || true to ignore failure if already reloaded
          sudo systemctl enable cri-docker.service
          sudo systemctl restart cri-docker.service || true  # Use || true to ignore failure if already started

      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          rm minikube-linux-amd64

      - name: Install Helm
        run: |
          curl https://baltocdn.com/helm/signing.asc | gpg --dearmor | sudo tee /usr/share/keyrings/helm.gpg > /dev/null
          sudo apt-get install apt-transport-https --yes
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | sudo tee /etc/apt/sources.list.d/helm-stable-debian.list
          sudo apt-get update
          sudo apt-get install -y helm

      - name: Start Minikube
        run: minikube start --driver=none --container-runtime=cri-dockerd

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.18.0'

      - name: Create .kube directory and set up Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > $HOME/.kube/config
          kubectl config use-context minikube

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f ecotrack-deployment.yaml
          kubectl apply -f ecotrack-service.yaml
